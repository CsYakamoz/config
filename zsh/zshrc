# shellcheck disable=SC2296,SC1090,SC2148
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

export ZSH="$HOME/.oh-my-zsh"

# theme {{{ #
# ZSH_THEME="ys"
ZSH_THEME="powerlevel10k/powerlevel10k"
# }}} theme #

# plugins {{{ #
plugins=(
  git
  sudo
  jump
  colored-man-pages

  zsh-autosuggestions
  F-Sy-H
  zsh-autopair
  fzf-tab
  git-open
)
# }}} plugins #

source $ZSH/oh-my-zsh.sh

# alias {{{ #
alias j="jump"
alias cp="cp -i"
alias gw="git worktree"
alias gwr="git worktree remove"
alias gopen="git-open"
# }}} alias #

# export {{{ #
export PATH=$PATH:~/Bin
export PATH=$PATH:~/go/bin

# export LANG=zh_CN.UTF-8
# export LC_ALL=zh_CN.UTF-8
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
# }}} export #

# proxy {{{ #
alias proxy_on="export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890"
alias proxy_off="unset http_proxy;unset https_proxy;unset HTTP_PROXY;unset all_proxy;"
# }}} proxy #

# git-helper {{{ #
function is_in_git() {
  git rev-parse --is-inside-work-tree > /dev/null 2>&1
}

function git_repository_root() {
  git rev-parse --show-toplevel
}
# }}} git-helper #

# func esgwt {{{ #
# easily switch git worktree, require: fzf
esgwt() {
  if ! is_in_git; then
    echo 'not a git repository, ignore...'
    return
  fi

  local worktree_list=""
  worktree_list=$(git worktree list)

  local count=""
  count=$(echo -e "${worktree_list}" | wc -l | awk '{print $1}')
  if [[ "${count}" == 1 ]]; then
    echo 'only one worktree, ignore...'
    return
  fi

  local loop_var=""

  # lcp -> longest common parent (dir)
  local lcp=""
  while read -r loop_var; do
    if [[ -z "${lcp}" ]]; then
      lcp="${loop_var}"
    else
      while [[ ! "${loop_var}" =~ ^${lcp} ]]; do
        lcp=$(dirname "${lcp}")
      done
    fi
  done < <(echo -e "${worktree_list}" | awk '{print $1}')

  if [[ "${lcp}" != "/" ]]; then
    lcp+="/"
  fi

  local current_dir=""
  current_dir=$(git_repository_root)

  local list=""
  local header=""
  while read -r loop_var; do
    local suffix="${loop_var#"${lcp}"}"
    if [[ "${loop_var}" == "${current_dir}"* ]]; then
      header="${suffix}"
    else
      if [[ -n "${list}" ]]; then
        list+="\n"
      fi
      list+="${suffix}"
    fi
  done < <(echo -e "${worktree_list}" | awk '{print $1, $3}')
  list="${header}\n$(echo -e "${list}" | sort)"

  local chosen=""
  chosen=$(echo -e "${list}" | fzf -1 --header-lines=1 -q "$1" --prompt 'Worktree> ')
  if [[ -z "${chosen}" ]]; then
    return
  fi

  local target="${lcp}/${chosen% *}"
  cd "${target}" || return
}

_esgwt() {
  COMPREPLY=()

  if ! is_in_git; then
    return 0
  fi

  local list
  list=$(git worktree list | awk '{print $1}' | while read -r dir; do basename "${dir}"; done)
  # reference: https://www.shellcheck.net/wiki/SC2207
  mapfile -t COMPREPLY < <(compgen -W "${list}")
  return 0
}

complete -F _esgwt esgwt
# }}} func esgwt #

# func bd {{{ #
# reference: https://github.com/Tarrasch/zsh-bd
bd() {
  local list=""
  local current="$PWD"

  while [[ "${current}" != "/" ]]; do
    current=$(dirname "${current}")
    if [[ -n "${list}" ]]; then
      list+="\n"
    fi
    list+="${current}"
  done

  local chosen=""
  chosen=$(echo -e "$list" | fzf -q "$1" --prompt 'BD> ')
  if [[ -z "${chosen}" ]]; then
    return
  fi
  cd "${chosen}" || return
}
# }}} func bd #

# func grs {{{ #
# easily run git restore command, require: fzf
unalias grs # oh-my-zsh git plugin has defined grs
grs() {
  if ! is_in_git; then
    echo 'not a git repository, ignore...'
    return
  fi

  local requiredVer="2.25.0"
  local currentVer=""
  currentVer=$(git --version | grep -oE "[0-9]+\.[0-9]+\.[0-9]+")
  if [ "$(printf '%s\n' "${requiredVer}" "$currentVer" | sort -V | head -n1)" != "${requiredVer}" ]; then
    echo "git version is at least ${requiredVer} for restore command"
    return
  fi

  local git_root=""
  git_root=$(git_repository_root)

  local cmd=""
  local list=""
  local diff=""
  if [[ $# -gt 0 ]]; then
    list=$(git diff --name-only "$1")
    cmd="git restore $1"
    diff="git diff $1"
  else
    list=$(git diff --name-only)
    cmd="git restore"
    diff="git diff"
  fi
  if [[ -z "${list}" ]]; then
    echo 'no file to restore, ignore...'
    return
  fi

  local chosen=""
  chosen=$(echo -e "${list}" | \
    fzf -m --prompt 'GRestore> ' \
    --bind alt-a:select-all,alt-d:deselect-all,alt-t:toggle-all,ctrl-/:toggle-preview,ctrl-d:preview-half-page-down,ctrl-u:preview-half-page-up \
    --preview="${diff} --color=always ${git_root}/{}" \
  )
  if [[ -z "${chosen}" ]]; then
    return
  fi

  (cd "${git_root}" && eval "${cmd}" "$1" "$(echo -e "${chosen}")")
}
# }}} func grs #

# func gwa {{{ #
gwa() {
  if ! is_in_git; then
    echo 'not a git repository, ignore...'
    return 0
  fi

  if [[ $# -lt 1 ]]; then
    echo -e "usage: gwa <branch-name>"
    return
  fi

  local choice branch_type=("feature" "fix" "refactor" "docs" "chore" "style" "test" "script")
  select choice in "${branch_type[@]}"; do
    if [[ -z "${choice}" ]]; then
      echo -e "invalid choice, nothing to do..."
      return
    fi
    break;
  done

  local git_root="" cmd
  git_root=$(git_repository_root)
  cmd="git worktree add ../${1} -b ${choice}/v$(date +"%Y%m%d")-${1}"
  echo -e "git root: ${git_root}"
  echo -e "cmd is '$cmd'"

  local answer
  read -r "?[gwa] Really run this cmd? [Y/n]" answer
  case "$answer" in
    y|Y)
      (cd "${git_root}" && eval "$cmd")
      ;;
    *)
      ;;
  esac
}
# }}} func gwa #

# func ide {{{ #
# reference: https://www.youtube.com/watch?v=sSOfr2MtRU8&t=335s
ide() {
  if [[ -z "${TMUX}" ]]; then
    echo "not in tmux-session"
    return
  fi

  tmux split-window -v -p 30
  tmux split-window -h -p 66
  tmux split-window -h -p 50
  tmux select-pane -t 1
}
# }}} func ide #

# func color {{{ #
color() {
  if [[ $# -eq 0 || ($1 != "light" && $1 != "dark") ]]; then
    echo "usage: color <light|dark>"
    return
  fi

  local config=(
    # dir                                         extension    cmd
    "${HOME}/.tmux"                               ".conf"      "tmux source-file ~/.tmux.conf"
    "${HOME}/.config/wezterm"                     ".lua"       ""
    "${HOME}/.config/nvim/lua/user/colorscheme"   ".lua"       "switch_nvim_color $1"
  )

  local i dir suffix cmd
  for (( i = 1; i <= ${#config[@]}; i+=3 )); do
    dir=${config[$i]}
    suffix="${config[$i+1]}"
    cmd="${config[$i+2]}"

    if [[ ! -d "${dir}" ]]; then
      echo "${dir} is not existed, skip..."
      continue
    fi

    (cd "${dir}" && ln -fs "$1${suffix}" "color${suffix}")
    if [[ -z "${cmd}" ]]; then
      echo "no cmd for ${dir}"
      continue
    fi

    eval "${cmd}" &
  done

  wait
}
# }}} func color #

# init {{{ #
# fnm setup
init_fnm() {
  eval "$(fnm env --use-on-cd)"
}
# }}} init #

# external software {{{ #
# fzf completion
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
# }}} external software #

# vim: set sw=2 ts=2 sts=2 et foldmarker={{{,}}} foldmethod=marker foldlevel=0:
