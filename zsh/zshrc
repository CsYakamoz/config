export ZSH="$HOME/.oh-my-zsh"

# theme {{{ #
# ZSH_THEME="ys"
# ZSH_THEME="agnoster"
ZSH_THEME=""
fpath+=("$HOME/.zsh/pure")
autoload -U promptinit; promptinit
prompt pure
# }}} theme #

# plugins {{{ #
plugins=(
  git
  sudo
  jump
  zsh-autosuggestions
  fast-syntax-highlighting
)
# }}} plugins #

source $ZSH/oh-my-zsh.sh

# alias {{{ #
alias j="jump"
alias rt="trash-put"
alias cp="cp -i"
alias gw="git worktree"
alias gwr="git worktree remove"
alias gvd="git difftool"
# }}} alias #

# export {{{ #
export PATH=$PATH:~/Bin
export PATH=$PATH:~/go/bin

# export LANG=zh_CN.UTF-8
# export LC_ALL=zh_CN.UTF-8
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
# }}} export #

# proxy {{{ #
alias proxy_on="export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890"
alias proxy_off="unset http_proxy;unset https_proxy;unset HTTP_PROXY;unset all_proxy;"
# }}} proxy #

# func esgwt {{{ #
# easily switch git worktree, require: fzf
esgwt() {
  if ! git worktree list > /dev/null 2>&1; then
    echo 'not a git repository, ignore...'
    return
  fi

  local worktree_list=""
  worktree_list=$(git worktree list)

  local count=""
  count=$(echo -e "${worktree_list}" | wc -l | awk '{print $1}')
  if [[ "${count}" == 1 ]]; then
    echo 'only one worktree, ignore...'
    return
  fi

  local loop_var=""

  # lcp -> longest common parent (dir)
  local lcp=""
  while read -r loop_var; do
    if [[ -z "${lcp}" ]]; then
      lcp="${loop_var}"
    else
      while [[ ! "${loop_var}" =~ ^${lcp} ]]; do
        lcp=$(dirname "${lcp}")
      done
    fi
  done < <(echo -e "${worktree_list}" | awk '{print $1}')

  if [[ "${lcp}" != "/" ]]; then
    lcp+="/"
  fi

  local current_dir=""
  current_dir=$(git rev-parse --show-toplevel)

  local list=""
  local header=""
  while read -r loop_var; do
    local suffix="${loop_var#${lcp}}"
    if [[ "${loop_var}" == "${current_dir}"* ]]; then
      header="${suffix}"
    else
      if [[ -n "${list}" ]]; then
        list+="\n"
      fi
      list+="${suffix}"
    fi
  done < <(echo -e "${worktree_list}" | awk '{print $1, $3}')
  list="${header}\n$(echo -e "${list}" | sort)"

  local chosen=""
  chosen=$(echo -e "${list}" | fzf -1 --header-lines=1 -q "$1" --prompt 'Worktree> ')
  if [[ -z "${chosen}" ]]; then
    return
  fi

  local target="${lcp}/${chosen% *}"
  cd "${target}" || return
}

_esgwt() {
  COMPREPLY=()

  if ! git worktree list > /dev/null 2>&1; then
    return 0
  fi

  local list
  list=$(git worktree list | awk '{print $1}' | while read dir; do basename "${dir}"; done)
  COMPREPLY=( $(compgen -W "${list}") )
  return 0
}

complete -F _esgwt esgwt
# }}} func esgwt #

# func vopen {{{ #
# vim-open: open file in vim
# require: realpath, neovim-remote, vim-floaterm
vopen() {
  if [ -z "$1" ]; then
    echo "usage: vopen {filename}"
    return
  fi

  if [ -z "$NVIM_LISTEN_ADDRESS" ]; then
    echo "must be called inside neovim"
    return
  fi

  name=$(realpath "${1}")
  if [[ ! -f "${name}" ]]; then
    echo "no such file: ${name}"
    return
  fi

  nvr --servername "${NVIM_LISTEN_ADDRESS}" -l "${name}"
  nvr --servername "${NVIM_LISTEN_ADDRESS}" -l --remote-send "<C-\\><C-n>:FloatermToggle<CR>"
}
# }}} func vopen #

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# plugin zsh-autopair {{{ #
if [[ ! -d ~/.zsh/zsh-autopair ]]; then
  mkdir -p ~/.zsh
  git clone https://github.com/hlissner/zsh-autopair ~/.zsh/zsh-autopair
fi

source ~/.zsh/zsh-autopair/autopair.zsh
autopair-init
# }}} plugin zsh-autopair #

# func bd {{{ #
# reference: https://github.com/Tarrasch/zsh-bd
bd() {
  local list=""
  local current="$PWD"

  while [[ "${current}" != "/" ]]; do
    current=$(dirname "${current}")
    if [[ -n "${list}" ]]; then
      list+="\n"
    fi
    list+="${current}"
  done

  local chosen=""
  chosen=$(echo -e "$list" | fzf -q "$1" --prompt 'BD> ')
  if [[ -z "${chosen}" ]]; then
    return
  fi
  cd "${chosen}" || return
}
# }}} func bd #

# func grs {{{ #
# easily run git restore command, require: fzf
unalias grs # oh-my-zsh git plugin has defined grs
grs() {
  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    echo 'not a git repository, ignore...'
    return
  fi

  local requiredVer="2.25.0"
  local currentVer=""
  currentVer=$(git --version | grep -oE "[0-9]+\.[0-9]+\.[0-9]+")
  if [ "$(printf '%s\n' "${requiredVer}" "$currentVer" | sort -V | head -n1)" != "${requiredVer}" ]; then
    echo "git version is at least ${requiredVer} for restore command"
    return
  fi

  local gitRoot=""
  gitRoot=$(git rev-parse --show-toplevel)

  local cmd=""
  local list=""
  local diff=""
  if [[ $# > 0 ]]; then
    list=$(git diff --name-only "$1")
    cmd="git restore $1"
    diff="git diff $1"
  else
    list=$(git diff --name-only)
    cmd="git restore"
    diff="git diff"
  fi
  if [[ -z "${list}" ]]; then
    echo 'no file to restore, ignore...'
    return
  fi

  local chosen=""
  chosen=$(echo -e "${list}" | \
    fzf -m --prompt 'GRestore> ' \
    --bind alt-a:select-all,alt-d:deselect-all,alt-t:toggle-all,ctrl-/:toggle-preview,ctrl-d:preview-half-page-down,ctrl-u:preview-half-page-up \
    --preview="${diff} --color=always ${gitRoot}/{}" \
  )
  if [[ -z "${chosen}" ]]; then
    return
  fi

  (cd "${gitRoot}"; eval ${cmd} $1 $(echo -e "${chosen}"))
}
# }}} func grs #

# gwa {{{ #
gwa() {
  if ! git worktree list > /dev/null 2>&1; then
    echo 'not a git repository, ignore...'
    return 0
  fi

  if [[ $# -lt 1 ]]; then
    echo -e "usage: gwa <branch-name>"
    return
  fi

  local choice branch_type=("feature" "fix" "refactor" "docs" "chore" "style" "test" "script")
  select choice in "${branch_type[@]}"; do
    if [[ -z "${choice}" ]]; then
      echo -e "invalid choice, nothing to do..."
      return
    fi
    break;
  done

  local git_root="" cmd
  git_root=$(git rev-parse --show-toplevel)
  cmd="git worktree add ../${1} -b ${choice}/v$(date +"%Y%m%d")-${1}"
  echo -e "git root: ${git_root}"
  echo -e "cmd is '$cmd'"

  local answer
  read "?[gwa] Really run this cmd? [Y/n]" answer
  case "$answer" in
    y|Y)
      (cd "${git_root}"; eval "$cmd")
      ;;
    *)
      ;;
  esac
}
# }}} gwa #

# vim: set sw=2 ts=2 sts=2 et foldmarker={{{,}}} foldmethod=marker foldlevel=0:
